/*
 * This software is in the public domain under CC0 1.0 Universal plus a
 * Grant of Patent License.
 *
 * To the extent possible under law, the author(s) have dedicated all
 * copyright and related and neighboring rights to this software to the
 * public domain worldwide. This software is distributed without any
 * warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication
 * along with this software (see the LICENSE.md file). If not, see
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.47.0'
        classpath "org.gradle-webtools.minify:gradle-minify-plugin:1.3.2"
    }
}
apply plugin: "org.gradlewebtools.minify"
apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy = { componentSelection { rules -> rules.all { ComponentSelection selection ->
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'b'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-].*/ }
    if (rejected) selection.reject('Release candidate')
} } }

def webrootPath = "screen/webroot"
def libsPath = webrootPath + "/libs"
def downloadBase = "http://cdnjs.cloudflare.com/ajax/libs/"
def fileMap = [
    "rsvp/4.8.3/rsvp.min.js":"",

    "font-awesome/4.7.0/css/font-awesome.min.css":"",
    "font-awesome/4.7.0/fonts/FontAwesome.otf":"",
    "font-awesome/4.7.0/fonts/fontawesome-webfont.eot":"",
    "font-awesome/4.7.0/fonts/fontawesome-webfont.svg":"",
    "font-awesome/4.7.0/fonts/fontawesome-webfont.ttf":"",
    "font-awesome/4.7.0/fonts/fontawesome-webfont.woff":"",
    "font-awesome/4.7.0/fonts/fontawesome-webfont.woff2":"",

    "jeditable.js/1.7.3/jeditable.min.js":"",

    "jquery/3.7.1/jquery.min.js":"",

    "jquery.form/4.2.1/jquery.form.min.js":"",
    "jquery.inputmask/3.3.4/jquery.inputmask.bundle.min.js":"",

    // can get jquery-sortable-lists from cdnjs? http://camohub.github.io/jquery-sortable-lists/

    "jquery-validate/1.17.0/jquery.validate.min.js":"",
    "jquery-validate/1.17.0/additional-methods.min.js":"",

    "jstree/3.3.8/jstree.min.js":"",
    "jstree/3.3.8/themes/default/style.min.css":"",
    "jstree/3.3.8/themes/default/32px.png":"",
    "jstree/3.3.8/themes/default/40px.png":"",
    "jstree/3.3.8/themes/default/throbber.gif":"",

    "moment.js/2.24.0/moment-with-locales.min.js":"",

    // js/select2/select2.min.js 4.0.3 has small changes so that widths are handled properly, so not in download list
    "select2/4.0.3/css/select2.min.css":"",

    "Selectivity.js/2.1.0/selectivity-full.min.js":"",
    "Selectivity.js/2.1.0/selectivity-full.min.css":"",

    "typeahead.js/0.11.1/typeahead.jquery.min.js":""
]

def jsdelivrBase = "https://cdn.jsdelivr.net/npm/"
def jsdelivrMap = [
    "vue@3.5.22/dist/vue.global.js":"vue3/vue.js",
    "vue@3.5.22/dist/vue.global.prod.js":"vue3/vue.min.js",
    "quasar@2.18.5/dist/quasar.umd.js":"quasar2/quasar.umd.js",
    "quasar@2.18.5/dist/quasar.umd.prod.js":"quasar2/quasar.umd.min.js",
    "quasar@2.18.5/dist/quasar.prod.css":"quasar2/quasar.min.css"
]

String getTargetPath(String sourcePath, String targetPath) {
    if (!targetPath) {
        String[] sourceSplit = sourcePath.split("/")
        targetPath = sourceSplit[0] + '/' + sourceSplit[2..sourceSplit.length-1].join('/')
    }
    return targetPath
}

//直接运行./gradlew load 通常会出现卡死下载的情况；为了绕过这个问题可设定全局VPN或需要做两步：
// 1、copy已经手动下载好的lib包，放置在指定位置； 2、直接运行任务downloadFiles，提示成功后，再运行load任务即可；
import java.net.URL
import java.net.URLConnection
import java.security.MessageDigest

task downloadFiles {
    doLast {
        // 内部方法：计算文件 MD5
        def md5 = { File file ->
            MessageDigest digest = MessageDigest.getInstance("MD5")
            file.withInputStream { is ->
                byte[] buffer = new byte[8192]
                int read
                while ((read = is.read(buffer)) > 0) {
                    digest.update(buffer, 0, read)
                }
            }
            digest.digest().collect { String.format("%02x", it) }.join()
        }

        // 内部方法：下载并验证文件
        def downloadAndVerify = { String sourceUrl, File targetFile ->
            targetFile.parentFile.mkdirs()
            int maxRetry = 3
            for (int attempt = 1; attempt <= maxRetry; attempt++) {
                try {
                    if (!targetFile.exists() || targetFile.length() == 0) {
                        logger.lifecycle("Downloading ${sourceUrl} → ${targetFile.absolutePath} (attempt ${attempt})")
                        URL url = new URL(sourceUrl)
                        URLConnection conn = url.openConnection()
                        conn.connectTimeout = 10000
                        conn.readTimeout = 20000
                        conn.getInputStream().withStream { input ->
                            targetFile.withOutputStream { out -> out << input }
                        }
                    }

                    // 文件完整性校验（非空且可选 MD5）
                    if (targetFile.length() == 0) {
                        logger.warn("Downloaded file is empty: ${targetFile.absolutePath}")
                        targetFile.delete()
                        continue
                    }

                    // 可扩展：MD5 校验，如果有已知 MD5，可在此比对
                    // String expectedMd5 = ...
                    // if (md5(targetFile) != expectedMd5) { targetFile.delete(); continue }

                    logger.info("Verified file: ${targetFile.absolutePath} (size=${targetFile.length()} bytes)")
                    break
                } catch (Exception e) {
                    logger.warn("Attempt ${attempt} failed for ${sourceUrl}: ${e.message}")
                    if (attempt == maxRetry) {
                        logger.warn("Giving up downloading ${sourceUrl} after ${maxRetry} attempts")
                    }
                }
            }
        }

        // 下载 fileMap
        fileMap.each { entry ->
            String sourcePath = entry.key
            String targetPath = getTargetPath(sourcePath, (String) entry.value)
            File targetFile = file("${libsPath}/${targetPath}")
            String sourceUrl = downloadBase + sourcePath
            downloadAndVerify(sourceUrl, targetFile)
        }

        // 下载 jsdelivrMap
        jsdelivrMap.each { jsdPath, targetPath ->
            File targetFile = file("${libsPath}/${targetPath}")
            String sourceUrl = jsdelivrBase + jsdPath
            downloadAndVerify(sourceUrl, targetFile)
        }

        logger.lifecycle("downloadFiles task completed. All files checked/downloaded.")
    }
}


def baseJs = []
// RSVP (promises, futures)
baseJs.add(libsPath + '/rsvp/rsvp.min.js')
// jQuery
baseJs.add(libsPath + '/jquery/jquery.min.js')
// Autocomplete (Twitter TypeAhead)
baseJs.add(libsPath + '/typeahead.js/typeahead.jquery.min.js')
// Input Masking
baseJs.add(libsPath + '/jquery.inputmask/jquery.inputmask.bundle.min.js')
// Form Validation and AJAX (jquery-validation, jquery-form)
baseJs.add(libsPath + '/jquery-validate/jquery.validate.min.js')
baseJs.add(libsPath + '/jquery-validate/additional-methods.min.js')
// Date/Time (Moment.js)
baseJs.add(libsPath + '/moment.js/moment-with-locales.min.js')
// Drop-down (Select2, Selectivity)
baseJs.add(webrootPath + '/js/select2.min.js')
baseJs.add(libsPath + '/Selectivity.js/selectivity-full.min.js')
// Inline Editable
baseJs.add(libsPath + '/jeditable.js/jeditable.min.js')
// Sortable Hierarchical List
baseJs.add(webrootPath + '/js/jquery-sortable-lists/jquery-sortable-lists.min.js')
// Moqui Library (3rd party lib workarounds, NotificationClient, etc)
baseJs.add(webrootPath + '/js/MoquiLib.min.js')

// NOTE: not adding qz-tray/qz-tray.js (qz-tray.min.js) or qz-tray/sha-256.min.js to combined base, only included if user preference 'qz.print.enabled' == "true"

def htmlJs = []
// Form AJAX (jquery-form)
htmlJs.add(libsPath + '/jquery.form/jquery.form.min.js')
// Tree (JSTree)
htmlJs.add(libsPath + '/jstree/jstree.min.js')

task minifyJsDir(type: org.gradlewebtools.minify.JsMinifyTask) {
    // see: https://github.com/gradle-webtools/gradle-minify-plugin
    // NOTE: JsMinifyTask (and the css one, etc) always recursively minify in sub-directories, no way to disable! (based on source review 2022-04-05)
    srcDir = file(webrootPath + "/js")
    dstDir = file(webrootPath + "/js")
    options.ignoreMinFiles = true
    options.emitUseStrict = false
    options.strictModeInput = false
    options.compilationLevel = com.google.javascript.jscomp.CompilationLevel.SIMPLE_OPTIMIZATIONS
    options.env = com.google.javascript.jscomp.CompilerOptions.Environment.BROWSER
    options.warningLevel = com.google.javascript.jscomp.WarningLevel.QUIET
    options.charset = StandardCharsets.UTF_8
    // because all sub-directories are processed for js files to minify, move and remove manually to clean up here...
    doLast {
        // move the two min files we want
        file(webrootPath + '/js/select2/select2.min.js')
                .renameTo(file(webrootPath + '/js/select2.min.js'))
        // delete the min files we don't need/want
        file(webrootPath + '/js/qz-tray/MoquiQzComponent.min.js').delete()
    }
}
task combineBaseJs {
    dependsOn downloadFiles
    dependsOn minifyJsDir
    // dependsOn minifySelect2
    // dependsOn minifyDateTimePicker
    doLast {
        def destFile = file("${webrootPath}/js/CombinedBase.min.js")
        destFile.write("")
        baseJs.each({
            destFile.append(file(it).getText("UTF-8"), "UTF-8")
            destFile.append("\n")
        })
    }
}
task build {
    dependsOn downloadFiles

    dependsOn minifyJsDir

    dependsOn combineBaseJs
}
task clean { doLast {
    delete fileTree(dir: "${webrootPath}/js", include: '*.min.js')
}}
task cleanAll { doLast {
    delete file(libsPath)
} }

<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        require-authentication="false" screen-theme-type-enum-id="STT_INTERNAL_QUASAR" default-menu-title="Applications" allow-extra-path="true">
    <!-- NOTE: require-authentication=false so no permission required but in pre-actions if no user logged in goes to login screen -->

    <pre-actions><script><![CDATA[
        // Check if accessing marketplace Chat
        def currentPath = sri.getScreenUrlInfo().getFullPathNameList().join("/")
        def isMarketplaceChat = currentPath?.contains("marketplace/Chat")

        // if user not logged in save current path and params then redirect to Login
        // Exception: allow unauthenticated access to marketplace Chat screen
        if (!ec.user.userId && !isMarketplaceChat) { ec.web.saveScreenLastInfo(null, null); sri.sendRedirectAndStopRender('/Login') }

        html_scripts.add('/libs/moment.js/moment-with-locales.min.js')
        html_scripts.add('/libs/jquery/jquery.min.js')

        // For marketplace Chat, pre-load the styles and LiveChat script
        if (isMarketplaceChat) {
            // Add the Chat.xml styles directly (using correct paths from apps)
            html_stylesheets.add('/libs/twitter-bootstrap/css/bootstrap.min.css')
            html_stylesheets.add('/css/webroot-layout.css')
            html_stylesheets.add('/css/webroot-theme.css')
            // Add marketplace chat specific styles
            html_stylesheets.add('/css/marketplace-chat.css')

            // Add LiveChat and marketplace chat scripts to footer
            footer_scripts.add('http://localhost:4000/livechat/rocketchat-livechat.min.js')
            footer_scripts.add('/js/marketplace-chat-livechat.js')
        }

        String instancePurpose = System.getProperty("instance_purpose")
        if (!instancePurpose || instancePurpose == 'production') {
            /* ========== Production Mode ========== */
            html_scripts.add('/js/MoquiLib.min.js')
            // Vue JS
            footer_scripts.add('/libs/vue/vue.min.js')
            // http-vue-loader
            footer_scripts.add('/js/http-vue-loader/httpVueLoader.js')
            // Quasar
            footer_scripts.add("/libs/quasar/quasar.umd.min.js")
            // Webroot Quasar-Vue instance, in footer so runs after page loaded
            footer_scripts.add('/js/WebrootVue.qvt.min.js')
        } else {
            /* ========== Dev Mode ========== */
            html_scripts.add('/js/MoquiLib.js')
            // Vue JS
            footer_scripts.add('/libs/vue/vue.js')
            // http-vue-loader
            footer_scripts.add('/js/http-vue-loader/httpVueLoader.js')
            // Quasar
            footer_scripts.add("/libs/quasar/quasar.umd.min.js")
            // Webroot Quasar-Vue instance, in footer so runs after page loaded
            footer_scripts.add('/js/WebrootVue.qvt.js')
        }

        // conditional QZ Tray scripts, only include if enabled
        if (ec.user.getPreference("qz.print.enabled") == "true") {
            footer_scripts.add('/js/qz-tray/sha-256.min.js')
            footer_scripts.add('/js/qz-tray/qz-tray.min.js')
            // TODO migrate MoquiQzComponent.js to MoquiQzComponent.qvt.js
            footer_scripts.add('/js/qz-tray/MoquiQzComponent.js')
        }
    ]]></script></pre-actions>

    <transition name="setPreference">
        <actions><script>
            // 检查用户是否已登录
            if (!ec.user.userId) {
                ec.web.response.sendError(401, "User not logged in")
                return
            }

            // 检查参数
            if (!preferenceKey) {
                ec.web.response.sendError(400, "preferenceKey is required")
                return
            }

            try {
                ec.user.setPreference(preferenceKey, preferenceValue)
            } catch (Exception e) {
                logger.error("setPreference failed for key ${preferenceKey}", e)
                ec.web.response.sendError(500, "Failed to set preference: " + e.message)
            }
        </script></actions>
        <default-response type="none"/>
    </transition>

    <transition name="qzSign">
        <parameter name="message"/>
        <actions><script>
            import org.moqui.context.ExecutionContext
            ExecutionContext ec = context.ec
            ec.web.response.setContentType("text/plain")
            ec.web.response.writer.write("---...---")
        </script></actions>
        <default-response type="none"/>
    </transition>

    <transition name="getPreferences">
        <actions><script>
            import groovy.json.JsonBuilder
            def preferences = [:]
            preferences["qz.printer.main.active"] = ec.user.getPreference("qz.printer.main.active") ?: ""
            preferences["qz.printer.label.active"] = ec.user.getPreference("qz.printer.label.active") ?: ""
            ec.web.response.setContentType("application/json")
            ec.web.response.writer.write(new JsonBuilder(preferences).toString())
        </script></actions>
        <default-response type="none"/>
    </transition>

    <transition name="menuData" read-only="true" begin-transaction="false">
        <actions><script><![CDATA[
            // Get menu data for qapps navigation, always include homepage link at top
            List menuDataList = []

            // Add "返回主页" (Return to Homepage) link at the top
            menuDataList.add([
                title: "返回主页",
                url: "/qapps/AppList",
                image: "fa fa-home",
                imageType: "icon"
            ])

            // Get standard menu data from screen
            List standardMenuList = sri.getMenuData(sri.screenUrlInfo.extraPathNameList)
            if (standardMenuList != null) {
                menuDataList.addAll(standardMenuList)
            }

            ec.web.sendJsonResponse(menuDataList)
        ]]></script></actions>
        <default-response type="none" save-parameters="true"/>
    </transition>

    <subscreens default-item="AppList">
        <subscreens-item name="AppList" location="component://webroot/screen/webroot/apps/AppList.xml"/>
        <subscreens-item name="tools" location="component://tools/screen/Tools.xml"/>
        <subscreens-item name="simple" location="component://SimpleScreens/screen/SimpleScreens.xml"/>
        <subscreens-item name="marketplace" location="component://moqui-marketplace/screen/marketplace.xml"/>
        <subscreens-item name="minio" location="component://moqui-minio/screen/MinioApp.xml"/>
    </subscreens>

    <widgets>
        <render-mode>
            <!-- for html just render the navbar (Vue page wrapper and nav component) -->
            <text type="html" location="component://webroot/screen/includes/WebrootVue.qvt.ftl"/>
            <!-- not meant to be used for anything else, for all other render modes go directly through /apps -->
        </render-mode>

        <!-- Always render subscreens - either the selected path or the default AppList -->
        <section name="SubscreenSection">
            <widgets>
                <render-mode><text template="true">${sri.renderSubscreen()}</text></render-mode>
            </widgets>
        </section>
    </widgets>
</screen>

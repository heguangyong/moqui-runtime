<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-3.xsd"
        standalone="true" default-menu-include="false" require-authentication="false" history="false">

    <parameter name="initialTab"/>
    <parameter name="returnTo"/>

    <transition name="login" require-session-token="false">
        <actions>
            <if condition="ec.web?.sessionAttributes?.moquiPreAuthcUsername"><then>
                <!-- already pre-auth'ed, verify code below -->
                <set field="username" from="ec.web?.sessionAttributes?.moquiPreAuthcUsername"/>
            </then><else>
                <!-- 纯JWT模式：直接使用统一认证API获取JWT Token -->
                <service-call name="org.moqui.jwt.JwtAuthServices.login#UnifiedAuth"
                              in-map="[username:username, password:password]" out-map="jwtResult" ignore-error="true"/>
                <if condition="jwtResult?.success &amp;&amp; jwtResult?.accessToken">
                    <script>
                            // Set JWT token in response header and cookie for API clients
                            ec.web.response.setHeader('Authorization', 'Bearer ' + jwtResult.accessToken)
                            ec.web.response.setHeader('X-Access-Token', jwtResult.accessToken)
                            if (jwtResult.refreshToken) {
                                ec.web.response.setHeader('X-Refresh-Token', jwtResult.refreshToken)
                            }
                            // Set JWT cookie for browser compatibility (纯JWT模式)
                            javax.servlet.http.Cookie jwtCookie = new javax.servlet.http.Cookie('jwt_access_token', jwtResult.accessToken)
                            jwtCookie.setPath('/')
                            jwtCookie.setMaxAge((jwtResult.expiresIn ?: 3600) as int)
                            jwtCookie.setHttpOnly(true)
                            ec.web.response.addCookie(jwtCookie)
                        </script>
                </if>
            </else></if>

            <if condition="ec.web.sessionAttributes.moquiAuthcFactorRequired">
                <if condition="code"><then>
                    <service-call name="org.moqui.impl.UserServices.validate#ExternalUserAuthcCode"
                            in-map="[code:code]" out-map="validateOut"/>
                    <if condition="validateOut.verified"><then>
                        <script>ec.user.internalLoginUser(validateOut.username)</script>
                        <!-- JWT Parallel Support: Use unified auth for 2FA users -->
                        <service-call name="org.moqui.jwt.JwtAuthServices.login#UnifiedAuth"
                                      in-map="[username:validateOut.username, password:'']" out-map="jwtResult" ignore-error="true"/>
                        <if condition="jwtResult?.accessToken">
                            <script>
                                // Set JWT token in response header and cookie for API clients
                                ec.web.response.setHeader('Authorization', 'Bearer ' + jwtResult.accessToken)
                                ec.web.response.setHeader('X-Access-Token', jwtResult.accessToken)
                                if (jwtResult.refreshToken) {
                                    ec.web.response.setHeader('X-Refresh-Token', jwtResult.refreshToken)
                                }
                                // Set JWT cookie for browser compatibility (纯JWT模式)
                                javax.servlet.http.Cookie jwtCookie = new javax.servlet.http.Cookie('jwt_access_token', jwtResult.accessToken)
                                jwtCookie.setPath('/')
                                jwtCookie.setMaxAge((jwtResult.expiresIn ?: 3600) as int)
                                jwtCookie.setHttpOnly(true)
                                ec.web.response.addCookie(jwtCookie)
                            </script>
                        </if>
                        <return/>
                    </then><else>
                        <message error="true" public="true">Authentication code is not valid</message>
                    </else></if>
                </then><else>
                    <message error="true" public="true">Authentication code required for user </message>
                </else></if>
            </if>
        </actions>
        <default-response type="screen-last"/>
        <error-response url="."/>
    </transition>
    <transition name="logout">
        <actions><script>
            // Traditional session logout (preserved)
            ec.user.logoutUser()

            // JWT Parallel Support: Clear JWT cookies while preserving session logout
            try {
                javax.servlet.http.Cookie jwtCookie = new javax.servlet.http.Cookie('jwt_access_token', '')
                jwtCookie.setPath('/')
                jwtCookie.setMaxAge(0)
                jwtCookie.setHttpOnly(true)
                ec.web.response.addCookie(jwtCookie)
            } catch (Exception e) {
                // Ignore errors in JWT cleanup
            }
        </script></actions>
        <default-response url="/"/>
        <error-response url="."/>
    </transition>
    <transition name="removePreAuth">
        <actions><script>
            ec.web.sessionAttributes.remove("moquiPreAuthcUsername")
            ec.web.sessionAttributes.remove("moquiAuthcFactorRequired")
            ec.web.sessionAttributes.remove("moquiPasswordChangeRequired")
            ec.web.sessionAttributes.remove("moquiExpiredCredentials")
        </script></actions>
        <default-response url="."/>
    </transition>
    <transition name="resetPassword">
        <parameter name="username" from="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: username"/>
        <service-call name="org.moqui.impl.UserServices.reset#Password" in-map="[username:username]"/>
        <default-response url="."/>
    </transition>
    <transition name="changePassword">
        <parameter name="username" from="ec.web?.sessionAttributes?.moquiPreAuthcUsername ?: username"/>
        <service-call name="org.moqui.impl.UserServices.update#Password"/>
        <actions>
            <!-- password change success, login the user -->
            <if condition="updateSuccessful">
                <set field="loginSuccess" from="ec.user.internalLoginUser(username)"/>
                <!-- JWT Parallel Support: Generate JWT token after successful password change while preserving session -->
                <if condition="loginSuccess &amp;&amp; ec.user.userId">
                    <!-- JWT Support: Use unified auth after password change -->
                    <service-call name="org.moqui.jwt.JwtAuthServices.login#UnifiedAuth"
                                  in-map="[username:username, password:newPassword]" out-map="jwtResult" ignore-error="true"/>
                    <if condition="jwtResult?.accessToken">
                        <script>
                            // Set JWT token in response header and cookie for API clients
                            ec.web.response.setHeader('Authorization', 'Bearer ' + jwtResult.accessToken)
                            ec.web.response.setHeader('X-Access-Token', jwtResult.accessToken)
                            if (jwtResult.refreshToken) {
                                ec.web.response.setHeader('X-Refresh-Token', jwtResult.refreshToken)
                            }
                            // Set JWT cookie for browser compatibility (纯JWT模式)
                            javax.servlet.http.Cookie jwtCookie = new javax.servlet.http.Cookie('jwt_access_token', jwtResult.accessToken)
                            jwtCookie.setPath('/')
                            jwtCookie.setMaxAge((jwtResult.expiresIn ?: 3600) as int)
                            jwtCookie.setHttpOnly(true)
                            ec.web.response.addCookie(jwtCookie)
                        </script>
                    </if>
                </if>
            </if>
        </actions>
        <conditional-response type="screen-last"><condition><expression>updateSuccessful</expression></condition></conditional-response>
        <default-response url="." parameter-map="[initialTab:'#change']"/>
    </transition>
    <transition name="createInitialAdminAccount">
        <service-call name="org.moqui.impl.UserServices.create#InitialAdminAccount"/>
        <default-response url="../Login"/>
        <error-response url="."/>
    </transition>
    <transition name="sendOtp">
        <service-call name="org.moqui.impl.UserServices.send#ExternalAuthcCode" in-map="[factorId:factorId]"/>
        <default-response url="."/>
    </transition>

    <pre-actions><script>
        if (ec.user.userId) sri.sendRedirectAndStopRender('/')
    </script></pre-actions>
    <actions>
        <if condition="returnTo"><then>
            <log message="setting last path to "/>
            <script>ec.web.session.setAttribute('moqui.screen.last.path', returnTo)</script>
        </then><else>
            <if condition="!ec.web.session.getAttribute('moqui.screen.last.path')">
                <set field="referrer" from="ec.web.request.getHeader('Referer')"/>
                <if condition="referrer"><script>ec.web.session.setAttribute('moqui.screen.last.path', referrer)</script></if>
            </if>
        </else></if>

        <set field="passwordChangeRequired" from="ec.web.sessionAttributes.moquiPasswordChangeRequired ?: 'false'" type="Boolean"/>
        <set field="expiredCredentials" from="ec.web.sessionAttributes.moquiExpiredCredentials ?: 'false'" type="Boolean"/>
        <if condition="passwordChangeRequired || expiredCredentials">
            <set field="initialTab" value="#change"/></if>
        <if condition="initialTab &amp;&amp; !initialTab.startsWith('#')"><set field="initialTab" from="'#' + initialTab"/></if>

        <set field="secondFactorRequired" from="ec.web.sessionAttributes.moquiAuthcFactorRequired ?: 'false'" type="Boolean"/>
        <if condition="secondFactorRequired"><then>
            <set field="username" from="ec.web.sessionAttributes.moquiPreAuthcUsername"/>
            <service-call name="org.moqui.impl.UserServices.get#ExternalUserAuthcFactorInfo" out-map="context"/>
        </then><else>
            <set field="username" from="ec.web.errorParameters?.username ?: ''"/>
        </else></if>

        <set field="hasExistingUsers" from="ec.entity.find('moqui.security.UserAccount').disableAuthz().count() &gt; 1" type="Boolean"/>
        <set field="testLoginAvailable" from="ec.entity.find('moqui.security.UserAccount').condition('userId', 'EX_JOHN_DOE')
                .condition('currentPassword', '16ac58bbfa332c1c55bd98b53e60720bfa90d394').disableAuthz().count() &gt; 0" type="Boolean"/>

        <set field="passwordNode" from="ec.ecfi.confXmlRoot.first('user-facade').first('password')"/>
        <set field="minLength" from="passwordNode.attribute('min-length')" default-value="8" type="Integer"/>
        <set field="minDigits" from="passwordNode.attribute('min-digits')" default-value="1" type="Integer"/>
        <set field="minOthers" from="passwordNode.attribute('min-others')" default-value="1" type="Integer"/>
    </actions>
    <widgets>
        <render-mode>
            <text type="html" template="true" location="component://webroot/screen/webroot/Login.ftl"/>
        </render-mode>
    </widgets>
</screen>
